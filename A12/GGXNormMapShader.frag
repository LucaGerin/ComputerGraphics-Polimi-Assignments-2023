#version 450#extension GL_ARB_separate_shader_objects : enable#define M_PI 3.1415926535897932384626433832795layout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec4 fragTan;layout(location = 3) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D tex;layout(binding = 3) uniform sampler2D normMap;layout(binding = 4) uniform sampler2D matMap;layout(binding = 2) uniform GlobalUniformBufferObject {	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} gubo;vec3 BRDF(vec3 V, vec3 N, vec3 L, vec3 Md, float F0, float metallic, float roughness) {	//vec3 V  - direction of the viewer	//vec3 N  - normal vector to the surface	//vec3 L  - light vector (from the light model)	//vec3 Md - main color of the surface	//float F0 - Base color for the Fresnel term	//float metallic - parameter that mixes the diffuse with the specular term.	//                 in particular, parmeter K seen in the slides is: float K = 1.0f - metallic;	//float roughness - Material roughness (parmeter rho in the slides).	//specular color Ms is not passed, and implicitely considered white: vec3 Ms = vec3(1.0f);	float d,f,g;	vec3 hlx = normalize(L+V);	float LdotN = max(0.00001f, dot(L, N));	float VdotN = max(0.00001f, dot(V, N));	float HdotN = max(0.00001f, dot(hlx, N));	float HdotV = max(0.00001f, dot(hlx, V));	//Lambert Direct light	//vec3 fDiffuseLambert = Md * max(LdotN, 0.0f);	vec3 fDiffuseLambert = Md * clamp(LdotN, 0.0f, 1.0f);	//GGX D	//d = (roughness*roughness) / (M_PI * (clamp(dot(N, hlx), 0.00001f, 1.0f)*clamp(dot(N, hlx), 0.00001f, 1.0f)*(roughness*roughness-1)+1) * (clamp(dot(N, hlx), 0.00001f, 1.0f)*clamp(dot(N, hlx), 0.00001f, 1.0f)*(roughness*roughness-1)+1) );	d = (roughness*roughness) / 			(M_PI * (clamp(HdotN, 0.0f, 1.0f)*clamp(HdotN, 0.0f, 1.0f)*(roughness*roughness-1)+1) * 				(clamp(HdotN, 0.0f, 1.0f)*clamp(HdotN, 0.0f, 1.0f)*(roughness*roughness-1)+1) );	//F	F0=1;	//f = F0 + (1-F0)*pow(1-clamp(dot(V, hlx), 0.00001f, 1.0f), 5);	f = F0 + (1-F0)*pow(1-clamp(HdotV, 0.0f, 1.0f), 5);	//GGX G	//float gV = 2 / ( 1 + sqrt(1+roughness*roughness*((1-pow(dot(N, V),2))/(pow(dot(N, V),2)))) );	//float gL = 2 / ( 1 + sqrt(1+roughness*roughness*((1-pow(dot(N, L),2))/(pow(dot(N, L),2)))) );	float gV = 2 / ( 1 + sqrt(1+roughness*roughness*((1-VdotN*VdotN)/(VdotN*VdotN))) );	float gL = 2 / ( 1 + sqrt(1+roughness*roughness*((1-LdotN*LdotN)/(LdotN*LdotN))) );	g = gV*gL;	//Specular color	vec3 Ms = vec3(1.0f);	//vec3 fSpecularGGX = Ms * ( d*f*g / (4*clamp(dot(V, N),0.00001f, 1.0f)) );	vec3 fSpecularGGX = Ms * ( d*f*g / (4*clamp(VdotN,0.0f, 1.0f)) );	//vec3 fSpecularGGX = Ms * ( d*f*g / (4*clamp(dot(L, N),0.00001f, 1.0f)*clamp(dot(V, N),0.00001f, 1.0f)) );	//coefficient for interpolation	float k = 1.0f - metallic;	vec3 result = k*fDiffuseLambert + (1-k)*fSpecularGGX;	//vec3 result = k*fDiffuseLambert + metallic*fSpecularGGX;		//return vec3(1,1,0);	return result;}void main() {	vec3 Norm = normalize(fragNorm);	vec3 Tan = normalize(fragTan.xyz - Norm * dot(fragTan.xyz, Norm));	vec3 Bitan = cross(Norm, Tan) * fragTan.w;	mat3 tbn = mat3(Tan, Bitan, Norm);	vec4 nMap = texture(normMap, fragUV);	vec3 N = normalize(tbn * (nMap.rgb * 2.0 - 1.0));	vec3 albedo = texture(tex, fragUV).rgb;	vec4 MRAO = texture(matMap, fragUV);	float roughness = MRAO.g;	float ao = MRAO.b;	float metallic = MRAO.r;		vec3 L = gubo.lightDir;	vec3 lightColor = gubo.lightColor.rgb;	vec3 V = normalize(gubo.eyePos - fragPos);	vec3 DiffSpec = BRDF(V, N, L, albedo, 0.3f, metallic, roughness);	vec3 Ambient = albedo * 0.05f * ao;		outColor = vec4(clamp(0.95 * DiffSpec * lightColor.rgb + Ambient,0.0,1.0), 1.0f);}